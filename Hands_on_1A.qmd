---
title: "Geospatial Data Wrangling with R"
editor: visual
---

## 1. Getting Started

The code chunk below will install and load tidyverse and sf packages.

```{r}
pacman::p_load(sf, tidyverse)
```

[`p_load`](https://cran.r-project.org/web/packages/pacman/pacman.pdf) function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf and tidyverse pacages into R environment.\

## 2. Data Acquisition

### 1.1 Importing polygon feature data in shapefile format

This code chunk will import ESRI shapefile into R.

```{r}
mpsz = st_read(dsn = "Hands-on_Ex1/data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

The message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

### 1.2 Importing polyline feature data in shapefile format

```{r}
cyclingpath = st_read(dsn = "Hands-on_Ex1/data/geospatial", 
                         layer = "CyclingPathGazette")
```

The message above reveals that there are a total of 1625 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **svy21** projected coordinates system too.

### 1.3 Importing GIS data in kml format

```{r}
preschool = st_read("Hands-on_Ex1/data/geospatial/pre-schools-location-kml.kml")
```

The message above reveals that `preschool` is a point feature data frame. There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.

## 2. Checking the Content of A Simple Feature Data Frame

This sub-section will show different ways to retrieve information related to the content of a simple feature data frame.

### 2.1 Working with st_geometry()

```{r}
st_geometry(mpsz)
```

Notice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

### 2.2 Working with glimpse()

```{r}
glimpse(mpsz)
```

*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

### 2.3 Working with head()

```{r}
head(mpsz, n=5)
```

head() reveals complete information of a feature object, for the first 5 rows in the data.

## 3. Plotting the Geospatial data

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above.

```{r}
plot(st_geometry(mpsz))
```

To plot only the geometry.

```{r}
plot(mpsz["PLN_AREA_N"])
```

To plot the sf object by using a specific attribute.

## 4. Working with Projection

This section will show how to project a simple feature data frame from one coordinate system to another coordinate system. This is also known as **projection transformation**.

### 4.1 Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

### 4.2 Assigning correct EPSG code to mpsz dataframe

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

```{r}
mpsz3414 <- st_transform(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

### 4.3 Transforming the projection of preschool from wgs84 to svy21

```{r}
st_geometry(preschool)
```

### 4.4 Performing project transformation using code change

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

```{r}
st_geometry(preschool3414)
```

## 5. Importing and converting An Aspatial Data

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

### 5.1 Importing the aspatial data

```{r}
listings <- read_csv("Hands-on_Ex1/data/aspatial/listings.csv")
```

```{r}
list(listings) 
```

### 5.2 Creating a simple feature dataframe from an aspatial dataframe

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country\'s epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

## 6. Geoprocessing with sf package

Besides providing functions to handling (i.e.Â importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

### 6.1 Buffering

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### 6.2 Point-in-polygon count

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 7. Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

### 7.1 Histogram

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

### 7.2 Scatterplot

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`), y= as.numeric(`PreSch Count`)))+
  geom_point() +
  labs(x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
