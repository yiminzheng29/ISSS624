---
title: "In-class Exercise 2: Birds of a feather flock together - Do functionally similar water points positively co-occur in Nigeria?"
execute: 
  warning: false
  echo: false
format: html
author: "Zheng Yimin"
date: "11/26/2022"
editor: visual
---

## 1. Getting Started

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   sf,

-   tidyverse,

-   tmap,

-   spdep, and

-   funModeling will be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
# funModeling --> for rapid EDA
```

## 2. Importing Geospatial Data

-   In this in-class data, two geospatial data sets will be used, they are:

    -   geo_export

    -   geoBoundaries-NGA-ADM2

### 2.1 Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e.Â geo_export) by using the code chunk below.

```{r}
#| eval: False
wp <- st_read(dsn = "data",
                 layer = "geo_export",
              crs=4326) %>%
  filter(clean_coun == "Nigeria")
```

-   `st_read()` of **sf** package is used to import *geo_export* shapefile into R environment and save the imported geospatial data into simple feature data table.

-   `filter()` of dplyr package is used to extract water point records of Nigeria.

In the code chunk below, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format.

```{r}
#| eval: False
wp_nga <- write_rds(wp, "data/wp_nga.rds")
# to shape into r-data format and save it so that you don't need to use wp anymore
```

### 2.2 Importing Nigeria LGA boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
nga <- st_read(dsn = "data",
                 layer = "geoBoundaries-NGA-ADM2",
               crs = 4326)
```

Thing to learn from the code chunk above.

-   `st_read()` of **sf** package is used to import *nga_admbnda_adm2_osgof_20190417* shapefile into R environment and save the imported geospatial data into simple feature data table.

## 3. Data wrangling

### 3.1 Recording NA values into string

In the code chunk below, `replace_na()` is used to recode all the *NA* values in *status_cle* field into *Unknown*.

```{r}
wp_nga <- read_rds("data/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### 3.2 EDA

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of *status_cle* field in *wp_nga*.

```{r}
freq(data=wp_nga,
     input = 'status_cle')
```

## 4. Extracting Water Point Data

In this section, we will extract the water point records by using classes in *status_cle* field.

### 4.1 Extracting funtional water point

In the code chunk below, `filter()` of dplyr is used to select functional water points.

```{r}
wpt_functional <- wp_nga %>%
  filter(str_detect(`status_cle`, '^(Functional)'))
```

```{r}
freq(data=wpt_functional,
     input = 'status_cle')
```

### 4.2 Extracting non-funtional water point

In the code chunk below, `filter()` of dplyr is used to select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>% filter(status_cle %in%
                                         c("Abandoned/Decommissioned",
                                           "Abandoned",
                                           "Non-Functional",
                                           "Non-Functional due to dry season",
                                           "Non functional due to dry season"))
```

```{r}
freq(data=wpt_nonfunctional,
     input = 'status_cle')
```

### 4.3 Extracting water point with Unknown class

In the code chunk below, `filter()` of dplyr is used to select water points with unknown status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(str_detect(`status_cle`, 'Unknown'))
```

## 5. Performing Point-in-Polygon Count

```{r}
nga_wp <- nga %>% 
  mutate('total wpt' = lengths(st_intersects(nga, wp_nga))) %>%
  mutate('wpt functional' = lengths(st_intersects(nga, wpt_functional))) %>%
  mutate('wpt non-functional' = lengths(st_intersects(nga, wpt_nonfunctional))) %>%
  mutate('wpt unknown' = lengths(st_intersects(nga, wpt_unknown)))
```

## 6. Saving the Analytical Data Table

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)
```

Things to learn from the code chunk above:

-   `mutate()` of **dplyr** package is used to derive two fields namely *pct_functional* and *pct_non-functional*.

-   to keep the file size small, `select()` of **dplyr** is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
write_rds(nga_wp, "data/nga_wp.rds")
```

Before you end this section, please remember to delete away all the raw data. Notice that the only data file left is *nga_wp.rds* and it's file size is around 2.1MB.

## 7. Visualising the spatial distribution of water points

```{r}
nga_wp <- read_rds("data/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```
